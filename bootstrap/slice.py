#!/usr/bin/env nix-shell
#!nix-shell -i python3 -p "python3.withPackages(ps: [ ps.ruamel-base ps.ruamel-yaml ps.ruamel-yaml-clib ])"

"""
This script was initially a shell script that used kubectl-slice,
but was rewritten in Python.

How to use:
    kustomize build | ./slice.py -o install-dir

Get usage with:
    ./slice.py -h
"""

import argparse
import os
from pathlib import Path
import pprint
import sys
from typing import Any, cast, TypeVar, Union

from functools import reduce
from ruamel.yaml import YAML


# Annotation used for files generated by ksops (missing the origin name)
ANNOTATION_ORIGIN = "qt.rs/origin"


# If only Python had a monadic dictionary :(
T = TypeVar('T')
def get(dictionary: dict[str, Any], *keys: str, default: T = None) -> Union[T, Any]:
    return reduce(lambda d, key: d.get(key, None) if isinstance(d, dict) else default, keys, dictionary)


def get_name(doc: dict) -> str:
    name = cast(str, get(doc, "metadata", "name"))
    kind = cast(str, get(doc, "kind"))
    return f"{kind.lower()}-{name}.yaml"


def get_installer_dir(doc: dict) -> str:
    return get(doc, "metadata", "annotations", "qt.rs/installer-dir") or ""


parser = argparse.ArgumentParser(description="Slice input (stdin) YAML documents into multiple files", allow_abbrev=False)
parser.add_argument("-o", "--output",
                    action="store", default=Path("."),
                    metavar="OUT-PATH", type=str, help="path to output YAML files to")
parser.add_argument("-n", "--dry-run", action=argparse.BooleanOptionalAction,
                    help="whether to display result without creating files")
parser.add_argument("-v", "--version", action="version", version="%(prog)s 1.0")

args = parser.parse_args()

DRY_RUN = True if os.getenv("DRY_RUN") is not None or args.dry_run else False

yaml = YAML(typ='safe')
yaml.version = (1, 2)
documents = yaml.load_all(sys.stdin)


for doc in documents:
    target_directory = get_installer_dir(doc).strip()
    origin = get(doc, "metadata", "annotations", "config.kubernetes.io/origin") or ""
    origin = Path(origin.removeprefix("path:").strip())
    # alternative_name = get_name(doc).strip()
    alternative_name = (get(doc, "metadata", "annotations", ANNOTATION_ORIGIN) or "").strip()

    # name = origin.name or alternative_name or get_name(doc).strip()
    name = origin.name or alternative_name
    if name == "":
        print("Skipping current document")
        pprint.pp(get(doc, "metadata", default={}))
        continue
    filename = Path(args.output) / target_directory / name

    # Create parents as needed
    if not filename.parent.exists():
        if DRY_RUN:
            print(f"Would create directory {filename.parent}")
        else:
            filename.parent.mkdir(parents=True, exist_ok=True)
            print(f"Created directory {filename.parent}")

    if DRY_RUN:
        print(f"Would write {filename}")
    else:
        with YAML(typ='safe', output=filename.absolute()) as yaml:
            yaml.dump(doc)
            print(f"Wrote {filename}")

